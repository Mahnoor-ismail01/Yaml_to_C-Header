!!python/object/apply:collections.OrderedDict
- - - add1.h
    - ''
  - - .schema
    - inst_schema.json#
  - - kind
    - instruction
  - - name
    - andn
  - - long.name
    - AND with inverted operand
  - - description
    - 'Performs the bitwise logical AND operation between `xs1` and the

      bitwise inversion of `xs2`.

      '
  - - definedby.anyof.0
    - Zbb
  - - definedby.anyof.1
    - Zbkb
  - - assembly
    - xd, xs1, xs2
  - - format..inherits.0
    - inst_subtype/R/R-x.yaml#/data
  - - format.opcodes.funct7.display.name
    - ANDN
  - - format.opcodes.funct7.value
    - '32'
  - - format.opcodes.funct3.display.name
    - ANDN
  - - format.opcodes.funct3.value
    - '7'
  - - format.opcodes.opcode..inherits
    - inst_opcode/OP.yaml#/data
  - - access.s
    - always
  - - access.u
    - always
  - - access.vs
    - always
  - - access.vu
    - always
  - - data.independent.timing
    - '1'
  - - operation..
    - "if (implemented?(ExtensionName::B) && (CSR[misa].B == 1'b0)) {\n  raise (ExceptionCode::IllegalInstruction,\
      \ mode(), $encoding);\n}\nX[xd] = X[xs2] & ~X[xs1];\n"
  - - sail..
    - "{\n  let rs1_val = X(rs1);\n  let rs2_val = X(rs2);\n  let result : xlenbits\
      \ = match op {\n    RISCV_ANDN => rs1_val & ~(rs2_val),\n    RISCV_ORN  => rs1_val\
      \ | ~(rs2_val),\n    RISCV_XNOR => ~(rs1_val ^ rs2_val),\n    RISCV_MAX  =>\
      \ to_bits(sizeof(xlen), max(signed(rs1_val),   signed(rs2_val))),\n    RISCV_MAXU\
      \ => to_bits(sizeof(xlen), max(unsigned(rs1_val), unsigned(rs2_val))),\n   \
      \ RISCV_MIN  => to_bits(sizeof(xlen), min(signed(rs1_val),   signed(rs2_val))),\n\
      \    RISCV_MINU => to_bits(sizeof(xlen), min(unsigned(rs1_val), unsigned(rs2_val))),\n\
      \    RISCV_ROL  => if sizeof(xlen) == 32\n                  then rs1_val <<<\
      \ rs2_val[4..0]\n                  else rs1_val <<< rs2_val[5..0],\n    RISCV_ROR\
      \  => if sizeof(xlen) == 32\n                  then rs1_val >>> rs2_val[4..0]\n\
      \                  else rs1_val >>> rs2_val[5..0]\n  };\n  X(rd) = result;\n\
      \  RETIRE_SUCCESS\n}\n"
